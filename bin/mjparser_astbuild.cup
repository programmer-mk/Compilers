

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, EQUAL, RETURN, COMMA, PRINT, VOID, CONST;
terminal PLUS, SUB, MUL, DIV, MOD;
terminal Integer NUMBER;
terminal Character CHAR;
terminal String BOOL;
terminal String IDENT;
/* terminal IF, ELSE; */
terminal LBRACK, RBRACK;
terminal INCREMENT, DECREMENT;
terminal ASSIGN;

nonterminal Program Program;
nonterminal VarDeclList VarDeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal VarDecl VarDecl;
nonterminal Type Type;
nonterminal MethodDecl MethodDecl;
nonterminal FormPars FormPars;
nonterminal StatementList StatementList;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal Statement Statement;
nonterminal Designator Designator;
nonterminal Expr Expr;
nonterminal Term Term;
nonterminal Addop Addop;
nonterminal Factor Factor;
nonterminal ActualPars ActualPars;
nonterminal ActualParamList ActualParamList;
nonterminal Mulop Mulop;
nonterminal Operation Operation;
nonterminal VarIdentList VarIdentList;
nonterminal VarIdent VarIdent;
nonterminal GlobalDeclList GlobalDeclList;
nonterminal GlobalDecl GlobalDecl;
nonterminal ConstDecl ConstDecl;
nonterminal ConstAssignList ConstAssignList;
nonterminal ConstValAssign ConstValAssign;
nonterminal ConstVal ConstVal;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal AssignStmnt AssignStmnt;

Program ::= (Program) PROG IDENT:I1 GlobalDeclList:G2 LBRACE MethodDeclList:M3 RBRACE {: RESULT=new Program(I1, G2, M3); RESULT.setLine(I1left); :};

GlobalDeclList ::= (GlobalDeclListFull) GlobalDeclList:G1 GlobalDecl:G2 {: RESULT=new GlobalDeclListFull(G1, G2); RESULT.setLine(G1left); :}
				   |
				   (GlobalDeclListNone) {: RESULT=new GlobalDeclListNone(); :} /* epsilon */
				   ;
				   
GlobalDecl ::=     (GlobalConstantDecl) ConstDecl:C1 {: RESULT=new GlobalConstantDecl(C1); RESULT.setLine(C1left); :}
			       |
			       (GlobalVariableDecl) VarDecl:V1 {: RESULT=new GlobalVariableDecl(V1); RESULT.setLine(V1left); :}
			       ;
			       
ConstDecl ::=      (ConstDeclaration) CONST Type:T1 ConstAssignList:C2 SEMI {: RESULT=new ConstDeclaration(T1, C2); RESULT.setLine(T1left); :};

ConstAssignList ::=    (ConstAssignListFull) ConstAssignList:C1 COMMA ConstValAssign:C2 {: RESULT=new ConstAssignListFull(C1, C2); RESULT.setLine(C1left); :}
                       |
                       (ConstAssignItem) ConstValAssign:C1 {: RESULT=new ConstAssignItem(C1); RESULT.setLine(C1left); :}
                       ;
                       
ConstValAssign  ::=     (ConstValAssign) IDENT:I1 ASSIGN ConstVal:C2 {: RESULT=new ConstValAssign(I1, C2); RESULT.setLine(I1left); :};


ConstVal        ::=     (ConstValNum) NUMBER:N1 {: RESULT=new ConstValNum(N1); RESULT.setLine(N1left); :} 
						|
						(ConstValChar) CHAR:C1 {: RESULT=new ConstValChar(C1); RESULT.setLine(C1left); :}
						|
						(ConstValBool) BOOL:B1 {: RESULT=new ConstValBool(B1); RESULT.setLine(B1left); :}
						;     
		
VarDeclList ::= (VarDeclarations) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclarations(V1, V2); RESULT.setLine(V1left); :}
			    |
			    (NoVarDecl) {: RESULT=new NoVarDecl(); :} /* epsilon */
			    ;

VarDecl ::= (VarDecl) Type:varType VarIdentList:V1 SEMI {: RESULT=new VarDecl(varType, V1); RESULT.setLine(varTypeleft); :};
			
			
VarIdentList  ::= (VariableIdentList) VarIdentList:V1 COMMA VarIdent:V2 {: RESULT=new VariableIdentList(V1, V2); RESULT.setLine(V1left); :}
                  |
                  (OneVariableIdent) VarIdent:V1 {: RESULT=new OneVariableIdent(V1); RESULT.setLine(V1left); :}
                  ;

VarIdent   ::= (VariableIdentSingle) IDENT:I1 {: RESULT=new VariableIdentSingle(I1); RESULT.setLine(I1left); :}
               |
               (ArrayVariableIdent) IDENT:I1 LBRACK RBRACK {: RESULT=new ArrayVariableIdent(I1); RESULT.setLine(I1left); :}
               ;
              

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
				|
				(NoMethodDecl) {: RESULT=new NoMethodDecl(); :} /* epsilon */
				;
				
MethodDecl ::= (MethodDecl) Type:retType IDENT:methName LPAREN FormPars:F1 RPAREN VarDeclList:V2 LBRACE StatementList:S3 RBRACE {: RESULT=new MethodDecl(retType, methName, F1, V2, S3); RESULT.setLine(retTypeleft); :};
              

FormPars ::= (FormParams) FormalParamList:F1 {: RESULT=new FormParams(F1); RESULT.setLine(F1left); :}
		     |
		     (NoFormParam) {: RESULT=new NoFormParam(); :} /* epsilon */
		     ;
		  
FormalParamList ::= (FormalParamDecls) FormalParamList:F1 COMMA FormalParamDecl:F2 {: RESULT=new FormalParamDecls(F1, F2); RESULT.setLine(F1left); :}
				|
				(SingleFormalParamDecl) FormalParamDecl:F1 {: RESULT=new SingleFormalParamDecl(F1); RESULT.setLine(F1left); :}
				;

StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :}
				|
				(NoStmt) {: RESULT=new NoStmt(); :} /* epsilon */
				;
				
		 

Statement ::= (Assignment) DesignatorStatement:D1 SEMI {: RESULT=new Assignment(D1); RESULT.setLine(D1left); :}
		   |
		   (ErrorStmt) error SEMI:l
		   {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new ErrorStmt(); :}
		   |
		   (PrintStmt) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new PrintStmt(E1); RESULT.setLine(E1left); :}
		   |
		   (ReturnExpr) RETURN Expr:t SEMI {: RESULT=new ReturnExpr(t); RESULT.setLine(tleft); :}
		   |
		   (ReturnNoExpr) RETURN SEMI {: RESULT=new ReturnNoExpr(); :}
		   ;
			
Expr ::= (AddSubExpr) Expr:te Operation:op Term:t {: RESULT=new AddSubExpr(te, op, t); RESULT.setLine(teleft); :}
	     |
	     (TermExpr) Term:t {: RESULT=new TermExpr(t); RESULT.setLine(tleft); :}
	     ;

Term ::= (Term) Factor:t {: RESULT=new Term(t); RESULT.setLine(tleft); :};

Factor ::= (Const) NUMBER:N1 {: RESULT=new Const(N1); RESULT.setLine(N1left); :}
		|
		(Var) Designator:d {: RESULT=new Var(d); RESULT.setLine(dleft); :}
		| 
		(FuncCall) Designator:func LPAREN ActualPars:A1 RPAREN {: RESULT=new FuncCall(func, A1); RESULT.setLine(funcleft); :}
		;
		
ActualPars ::= (Actuals) ActualParamList:A1 {: RESULT=new Actuals(A1); RESULT.setLine(A1left); :}
			|
			(NoActuals) {: RESULT=new NoActuals(); :} /* epsilon */
			;
		
ActualParamList ::= (ActualParams) ActualParamList:A1 COMMA Expr:E2 {: RESULT=new ActualParams(A1, E2); RESULT.setLine(A1left); :}
				|
				(ActualParam) Expr:E1 {: RESULT=new ActualParam(E1); RESULT.setLine(E1left); :}
				;

DesignatorStatement     ::= (AssignDesignatorStatement) AssignStmnt:A1 {: RESULT=new AssignDesignatorStatement(A1); RESULT.setLine(A1left); :}
                            |
                            (IncrementStatement) Designator:D1 INCREMENT {: RESULT=new IncrementStatement(D1); RESULT.setLine(D1left); :}
                            |
                            (DecrementStatement) Designator:D1 DECREMENT {: RESULT=new DecrementStatement(D1); RESULT.setLine(D1left); :};				
				
AssignStmnt             ::= (AssignStatement) Designator:D1 ASSIGN Expr:E2 {: RESULT=new AssignStatement(D1, E2); RESULT.setLine(D1left); :};				
				
Designator ::= (Designator) IDENT:name {: RESULT=new Designator(name); RESULT.setLine(nameleft); :};

Operation ::= (AddOperation) Addop:A1 {: RESULT=new AddOperation(A1); RESULT.setLine(A1left); :}
		      |
		      (MulOperation) Mulop:M1 {: RESULT=new MulOperation(M1); RESULT.setLine(M1left); :}
		      ;

Addop ::= (Addop) PLUS {: RESULT=new Addop(); :}
		  |
		  (Subop) SUB {: RESULT=new Subop(); :}
		  ;

Mulop ::= (Mulop) MUL {: RESULT=new Mulop(); :}
		  |
		  (Divop) DIV {: RESULT=new Divop(); :}
		  |
		  (Modop) MOD {: RESULT=new Modop(); :}
		  ;
		
		

