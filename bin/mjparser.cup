    

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   	boolean errorDetected;
   
    // redefined methods for error reporting because text message content change
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, EQUAL, RETURN, COMMA, PRINT, VOID, CONST, NEW, READ;
terminal PLUS, SUB, MUL, DIV, MOD;
terminal Integer NUMBER;
terminal Character CHAR;
terminal String BOOL;
terminal String IDENT;
/* terminal IF, ELSE; */
terminal LBRACK, RBRACK;
terminal INCREMENT, DECREMENT;
terminal ASSIGN;
terminal  ADDEQUAL, SUBEQUAL, MULEQUAL, DIVEQUAL, MODEQUAL;

nonterminal VarDeclList, MethodDeclList, VarDecl;
nonterminal FormPars, StatementList, FormalParamList, FormalParamDecl, Statement;
nonterminal Addop, ActualPars, ActualParamList;
nonterminal Mulop;
nonterminal Assignop, AddopLeft, AddopRight, MullopLeft, MullopRight;
nonterminal VarIdentList, VarIdent;
nonterminal GlobalDeclList, GlobalDecl;
nonterminal ConstDecl, ConstAssignList, ConstValAssign;
nonterminal DesignatorStatement;
nonterminal PreFormParsDummy;
nonterminal PreActParsDummy;
nonterminal ActualParam;
nonterminal PreArrIdxDummy;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodDecl, MethodSignature, Designator,AssignStmnt,ConstVal;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Factor, Term, Expr,IncludeVoidType;

Program ::= (Program) PROG ProgName:p GlobalDeclList LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgName) IDENT:progName;

GlobalDeclList ::= (GlobalDeclListFull) GlobalDeclList GlobalDecl
				   |
				   (GlobalDeclListNone) /* epsilon */
				   ;
				   
GlobalDecl ::=     (GlobalConstantDecl) ConstDecl:cd
			       |
			       (GlobalVariableDecl) VarDecl:vd
			       ;
			       
ConstDecl ::=      (ConstDeclaration) CONST Type ConstAssignList SEMI;

ConstAssignList ::=    (ConstAssignListFull) ConstAssignList COMMA ConstValAssign
                       |
                       (ConstAssignItem) ConstValAssign
                       ;
                       
ConstValAssign  ::=     (ConstValAssign) IDENT:constIdent Assignop ConstVal;


ConstVal        ::=     (ConstValNum) NUMBER 
						|
						(ConstValChar) CHAR
						|
						(ConstValBool) BOOL
						;     
		
VarDeclList ::= (VarDeclarations) VarDeclList VarDecl
			    |
			    (NoVarDecl) /* epsilon */
			    ;

VarDecl ::= (VarDecl) Type:varType VarIdentList SEMI;
			
			
VarIdentList  ::= (VariableIdentList) VarIdentList COMMA VarIdent
                  |
                  (OneVariableIdent) VarIdent:varIdent
                  ;

VarIdent   ::= (VariableIdentSingle) IDENT:varIdent
               |
               (ArrayVariableIdent) IDENT:arrIdent LBRACK RBRACK
               ;
              

Type ::= (Type) IDENT:typeName;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
				|
				(NoMethodDecl) /* epsilon */
				;				
				
MethodDecl ::= (MethodDecl) MethodSignature VarDeclList LBRACE StatementList RBRACE;
 
MethodSignature ::= (MethodSignature) IncludeVoidType IDENT:methName LPAREN  PreFormParsDummy FormPars RPAREN;

IncludeVoidType ::= (WithoutVoidType) Type:typeName
					|
					(VoidType) VOID
					;

FormPars ::= (FormParams) FormalParamList
		     |
		     (NoFormParam) /* epsilon */
		     ;
		  
FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
				|
				(SingleFormalParamDecl) FormalParamDecl
				;
				
FormalParamDecl ::= (FormParDeclSingle) Type IDENT
                |
                (FormParDeclArray) Type IDENT LBRACK RBRACK
                |
                (FormParDeclError) error:l
                {: parser.report_error("Error recovery in formal param declaration on line" + lleft, null); :}
                ;
                
PreFormParsDummy ::=  (PreFormParsDummy) /* epsilon */ ;

StatementList ::= (Statements) StatementList Statement
				|
				(NoStmt) /* epsilon */
				;
				
				
Statement ::= (Assignment) DesignatorStatement SEMI
		   |
		   (ErrorStmt) error SEMI:l
		   {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :}
		   |
		   (PrintStmt) PRINT LPAREN Expr RPAREN SEMI
		   |
		   (ReadStmt) READ LPAREN Designator:d  RPAREN SEMI
		   |
		   (ReturnExpr) RETURN Expr:t SEMI
		   |
		   (ReturnNoExpr) RETURN SEMI
		   |
		   (ProcCall) Designator: func LPAREN ActualPars RPAREN SEMI
		   ;
			
Expr ::= (AddSubExpr) Expr:te Addop Term
	     |
	     (TermExpr) Term
	     ;

Term ::= (TermFactor) Factor:t
		 |
		 (TermMulop) Term Mulop Factor
		 ;

Factor ::= (Var) Designator:d
			|
			(FactorConstVal) ConstVal
			| 
			(FuncCall) Designator:func LPAREN PreActParsDummy ActualPars RPAREN
			|
			(DynamicData) NEW Type:type 
			|
			(DynamicArr) NEW Type:type LBRACK Expr RBRACK
			|
			(FactorParen) LPAREN Expr RPAREN
			;
		
PreActParsDummy ::= (PreActParsDummy) /* epsilon */ ;
		
ActualPars ::= (Actuals) ActualParamList
			|
			(NoActuals) /* epsilon */
			;
		
ActualParamList ::= (ActualParams) ActualParamList COMMA ActualParam
				|
				(ActualParameter) ActualParam
				;
				
ActualParam ::= (ActualPar) Expr;

DesignatorStatement     ::= (AssignDesignatorStatement) AssignStmnt
                            |
                            (IncrementStatement) Designator INCREMENT
                            |
                            (DecrementStatement) Designator DECREMENT
                            ;	
                            						
				
AssignStmnt             ::= (AssignStatement) Designator:design Assignop Expr
							;	
								
				
Designator ::= (DesignatorVar) IDENT:name
			   |
			   (ArrayElemDesignator) Designator LBRACK PreArrIdxDummy Expr RBRACK
			   ;
			   

PreArrIdxDummy ::= (PreArrIdxDummy); /* epsilon */


Assignop ::=  (Assignop) ASSIGN
              |
              (AddRightOp)  AddopRight 
              |
              (MullRightOp) MullopRight
              ;
 
Addop ::= (AddLeft) AddopLeft
          | 
          (AddRight) AddopRight
          ;
          
AddopLeft ::= (Add) PLUS
		      |
		      (Sub) SUB
		      ;

AddopRight ::= (AddEqual) ADDEQUAL
			   |
			   (SubEqual) SUBEQUAL
			   ;

Mulop ::= (MulLeft) MullopLeft
          | 
          (MulRight) MullopRight
          ;

			    
MullopLeft ::= (Muloperation) MUL
		       |
		       (Divoperation) DIV
		       |
		       (Modoperation) MOD
		       ;

MullopRight ::= (MullAddEqual) MULEQUAL
			   |
			   (DivEqual) DIVEQUAL
			   |
			   (ModEqual) MODEQUAL
			   ;


		
		

