

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, EQUAL, RETURN, COMMA, PRINT, VOID, CONST;
terminal PLUS, SUB, MUL, DIV, MOD;
terminal Integer NUMBER;
terminal Character CHAR;
terminal String BOOL;
terminal String IDENT;
/* terminal IF, ELSE; */
terminal LBRACK, RBRACK;
terminal INCREMENT, DECREMENT;
terminal ASSIGN;

nonterminal Program, VarDeclList, MethodDeclList, VarDecl, Type, MethodDecl;
nonterminal FormPars, StatementList, FormalParamList, FormalParamDecl, Statement;
nonterminal Designator, Expr, Term, Addop, Factor, ActualPars, ActualParamList;
nonterminal Mulop, Operation;
nonterminal VarIdentList, VarIdent;
nonterminal GlobalDeclList, GlobalDecl;
nonterminal ConstDecl, ConstAssignList, ConstValAssign, ConstVal;
nonterminal DesignatorStatement, AssignStmnt;

Program ::= (Program) PROG IDENT GlobalDeclList LBRACE MethodDeclList RBRACE;

GlobalDeclList ::= (GlobalDeclListFull) GlobalDeclList GlobalDecl
				   |
				   (GlobalDeclListNone) /* epsilon */
				   ;
				   
GlobalDecl ::=     (GlobalConstantDecl) ConstDecl
			       |
			       (GlobalVariableDecl) VarDecl
			       ;
			       
ConstDecl ::=      (ConstDeclaration) CONST Type ConstAssignList SEMI;

ConstAssignList ::=    (ConstAssignListFull) ConstAssignList COMMA ConstValAssign
                       |
                       (ConstAssignItem) ConstValAssign
                       ;
                       
ConstValAssign  ::=     (ConstValAssign) IDENT ASSIGN ConstVal;


ConstVal        ::=     (ConstValNum) NUMBER 
						|
						(ConstValChar) CHAR
						|
						(ConstValBool) BOOL
						;     
		
VarDeclList ::= (VarDeclarations) VarDeclList VarDecl
			    |
			    (NoVarDecl) /* epsilon */
			    ;

VarDecl ::= (VarDecl) Type:varType VarIdentList SEMI;
			
			
VarIdentList  ::= (VariableIdentList) VarIdentList COMMA VarIdent
                  |
                  (OneVariableIdent) VarIdent
                  ;

VarIdent   ::= (VariableIdentSingle) IDENT
               |
               (ArrayVariableIdent) IDENT LBRACK RBRACK
               ;
              

Type ::= (Type) IDENT:typeName;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
				|
				(NoMethodDecl) /* epsilon */
				;
				
MethodDecl ::= (MethodDecl) Type:retType IDENT:methName LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE;
              

FormPars ::= (FormParams) FormalParamList
		     |
		     (NoFormParam) /* epsilon */
		     ;
		  
FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
				|
				(SingleFormalParamDecl) FormalParamDecl
				;

StatementList ::= (Statements) StatementList Statement
				|
				(NoStmt) /* epsilon */
				;
				
		 

Statement ::= (Assignment) DesignatorStatement SEMI
		   |
		   (ErrorStmt) error SEMI:l
		   {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :}
		   |
		   (PrintStmt) PRINT LPAREN Expr RPAREN SEMI
		   |
		   (ReturnExpr) RETURN Expr:t SEMI
		   |
		   (ReturnNoExpr) RETURN SEMI
		   ;
			
Expr ::= (AddSubExpr) Expr:te Operation:op Term:t
	     |
	     (TermExpr) Term:t
	     ;

Term ::= (Term) Factor:t;

Factor ::= (Const) NUMBER
		|
		(Var) Designator:d
		| 
		(FuncCall) Designator:func LPAREN ActualPars RPAREN
		;
		
ActualPars ::= (Actuals) ActualParamList
			|
			(NoActuals) /* epsilon */
			;
		
ActualParamList ::= (ActualParams) ActualParamList COMMA Expr
				|
				(ActualParam) Expr
				;

DesignatorStatement     ::= (AssignDesignatorStatement) AssignStmnt
                            |
                            (IncrementStatement) Designator INCREMENT
                            |
                            (DecrementStatement) Designator DECREMENT;				
				
AssignStmnt             ::= (AssignStatement) Designator ASSIGN Expr;				
				
Designator ::= (Designator) IDENT:name;

Operation ::= (AddOperation) Addop
		      |
		      (MulOperation) Mulop
		      ;

Addop ::= (Addop) PLUS
		  |
		  (Subop) SUB
		  ;

Mulop ::= (Mulop) MUL
		  |
		  (Divop) DIV
		  |
		  (Modop) MOD
		  ;
		
		

